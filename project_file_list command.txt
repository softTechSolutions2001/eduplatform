# Enhanced PowerShell command to get project file list with line counts
$results = Get-ChildItem -Recurse -File -Force | Where-Object {
    # Exclude dependency/build directories
    $_.FullName -notmatch '\\node_modules\\' -and
    $_.FullName -notmatch '\\venv\\' -and
    $_.FullName -notmatch '\\env\\' -and
    $_.FullName -notmatch '\\\.venv\\' -and
    $_.FullName -notmatch '\\__pycache__\\' -and
    $_.FullName -notmatch '\\\.pytest_cache\\' -and
    $_.FullName -notmatch '\\static\\' -and
    $_.FullName -notmatch '\\staticfiles\\' -and
    $_.FullName -notmatch '\\media\\' -and
    $_.FullName -notmatch '\\uploads\\' -and
    $_.FullName -notmatch '\\dist\\' -and
    $_.FullName -notmatch '\\build\\' -and
    $_.FullName -notmatch '\\coverage\\' -and
    $_.FullName -notmatch '\\\.nyc_output\\' -and

    # Exclude project-specific directories
    $_.FullName -notmatch '\\backend_analyzer\\' -and
    $_.FullName -notmatch '\\tools\\' -and
    $_.FullName -notmatch '\\backend_docs_extractor\\' -and
    $_.FullName -notmatch '\\frontend\\cypress\\' -and
    $_.FullName -notmatch '\\frontend\\docs\\' -and

    # Exclude IDE/Editor directories
    $_.FullName -notmatch '\\\.vscode\\' -and
    $_.FullName -notmatch '\\\.idea\\' -and
    $_.FullName -notmatch '\\\.cursor\\' -and
    $_.FullName -notmatch '\\\.vs\\' -and

    # Exclude version control and CI
    $_.FullName -notmatch '\\\.git\\' -and
    $_.FullName -notmatch '\\\.github\\workflows\\' -and
    $_.FullName -notmatch '\\\.husky\\' -and

    # Exclude temporary/cache files
    $_.FullName -notmatch '\\logs\\' -and
    $_.FullName -notmatch '\\tmp\\' -and
    $_.FullName -notmatch '\\temp\\' -and
    $_.FullName -notmatch '\\screenshots\\' -and
    $_.FullName -notmatch '\\cypress\\screenshots\\' -and
    $_.FullName -notmatch '\\cypress\\videos\\' -and

    # Exclude specific file patterns
    $_.Name -notmatch '\.pyc$' -and
    $_.Name -notmatch '\.pyo$' -and
    $_.Name -notmatch '\.pyd$' -and
    $_.Name -notmatch '\.log$' -and
    $_.Name -notmatch '\.tmp$' -and
    $_.Name -notmatch '\.cache$' -and
    $_.Name -notmatch '\.sqlite3$' -and
    $_.Name -notmatch 'db\.sqlite3$' -and
    $_.Name -notmatch '\.db$' -and
    $_.Name -notmatch '.*debug.*\.log$' -and
    $_.Name -notmatch '.*error.*\.log$' -and
    $_.Name -notmatch '\.coverage$' -and
    $_.Name -notmatch '\.lcov$' -and
    $_.Name -notmatch '\.DS_Store$' -and
    $_.Name -notmatch 'Thumbs\.db$' -and
    $_.Name -notmatch '\.env\.local$' -and
    $_.Name -notmatch '\.env\..*\.local$' -and

    # Exclude lock files (optional - uncomment if you don't want them)
    # $_.Name -notmatch 'package-lock\.json$' -and
    # $_.Name -notmatch 'yarn\.lock$' -and
    # $_.Name -notmatch 'pnpm-lock\.yaml$' -and

    # Exclude backup and temporary files
    $_.Name -notmatch '\.bak$' -and
    $_.Name -notmatch '\.backup$' -and
    $_.Name -notmatch '\.swp$' -and
    $_.Name -notmatch '\.swo$' -and
    $_.Name -notmatch '~$' -and

    # Exclude specific project files that might be too verbose
    $_.Name -ne 'project_file_list.txt' -and
    $_.Name -notmatch '.*\.cpython-.*\.pyc$'
} | ForEach-Object {
    # Function to count lines in a file
    function Get-LineCount {
        param($FilePath)

        try {
            # Handle different file types
            $extension = [System.IO.Path]::GetExtension($FilePath).ToLower()

            # For binary files, return 0
            $binaryExtensions = @('.jpg', '.jpeg', '.png', '.gif', '.bmp', '.ico', '.pdf', '.zip', '.rar', '.tar', '.gz', '.exe', '.dll', '.so', '.dylib', '.woff', '.woff2', '.ttf', '.otf', '.mp3', '.mp4', '.avi', '.mov', '.wav')
            if ($binaryExtensions -contains $extension) {
                return 0
            }

            # For text files, count non-empty lines
            $content = Get-Content -Path $FilePath -ErrorAction SilentlyContinue
            if ($content) {
                # Count non-empty lines (excluding pure whitespace)
                return ($content | Where-Object { $_.Trim() -ne '' }).Count
            } else {
                return 0
            }
        } catch {
            return 0
        }
    }

    # Get line count for current file
    $lineCount = Get-LineCount -FilePath $_.FullName

    # Remove the full path up to the project root, keeping relative paths
    $rel = ($_.FullName -replace '.*(?:backend|frontend)[\\\/]', '')

    # Determine if it's backend or frontend and prefix accordingly
    $relativePath = ""
    if ($_.FullName -match '\\backend\\') {
        $relativePath = "backend/$rel"
    } elseif ($_.FullName -match '\\frontend\\') {
        $relativePath = "frontend/$rel"
    } else {
        # For files in the root or other directories
        $rel = ($_.FullName -replace '.*(?:eduplatform)[\\\/]', '')
        $relativePath = "$rel"
    }

    # Format the output with line count
    if ($lineCount -gt 0) {
        if ($_.Extension -eq '.py') {
            # Special formatting for Python files
            "$relativePath ($lineCount LOC)"
        } else {
            "$relativePath ($lineCount lines)"
        }
    } else {
        "$relativePath"
    }

    # Return an object for further processing if needed
    return [PSCustomObject]@{
        Path = $relativePath
        LineCount = $lineCount
        Extension = $_.Extension
        FullOutput = if ($lineCount -gt 0) {
            if ($_.Extension -eq '.py') { "$relativePath ($lineCount LOC)" }
            else { "$relativePath ($lineCount lines)" }
        } else { "$relativePath" }
    }
} | Where-Object { $_.Path -ne '' } | Sort-Object Path -Unique

# Output to file
$results | Select-Object -ExpandProperty FullOutput | Out-File project_file_list.txt -Encoding UTF8

# Display summary statistics
Write-Host "Project file list with line counts generated successfully in project_file_list.txt"
Write-Host ""
Write-Host "Summary Statistics:"
Write-Host "=================="

$pythonFiles = $results | Where-Object { $_.Extension -eq '.py' }
$totalPythonLOC = ($pythonFiles | Measure-Object -Property LineCount -Sum).Sum
$pythonFileCount = $pythonFiles.Count

$allFiles = $results | Where-Object { $_.LineCount -gt 0 }
$totalLOC = ($allFiles | Measure-Object -Property LineCount -Sum).Sum
$totalFileCount = $allFiles.Count

Write-Host "Python files: $pythonFileCount files, $totalPythonLOC total LOC"
Write-Host "All text files: $totalFileCount files, $totalLOC total lines"
Write-Host "Binary/empty files: $(($results | Where-Object { $_.LineCount -eq 0 }).Count) files"

# Optional: Display top 10 largest Python files
if ($pythonFiles.Count -gt 0) {
    Write-Host ""
    Write-Host "Top 10 Largest Python Files:"
    Write-Host "============================="
    $pythonFiles | Sort-Object LineCount -Descending | Select-Object -First 10 | ForEach-Object {
        Write-Host "$($_.Path) - $($_.LineCount) LOC"
    }
}
