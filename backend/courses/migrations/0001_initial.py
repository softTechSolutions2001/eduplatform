# Generated by Django 5.2 on 2025-07-11 14:33

import courses.models.core
import courses.validators
import django.core.validators
import django.db.models.deletion
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('answer_text', models.CharField(blank=True, default='', help_text='Answer text (minimum 1 character)', max_length=500, validators=[django.core.validators.MinLengthValidator(1)])),
                ('text', models.TextField(blank=True, default='', help_text='Alias for answer_text for backward compatibility')),
                ('is_correct', models.BooleanField(default=False, help_text='Whether this is the correct answer')),
                ('explanation', models.TextField(blank=True, default='', help_text='Explanation for this answer choice')),
                ('order', models.PositiveIntegerField(default=1, help_text='Display order of this answer')),
            ],
            options={
                'verbose_name': 'Answer',
                'verbose_name_plural': 'Answers',
                'ordering': ['question', 'order'],
            },
        ),
        migrations.CreateModel(
            name='Assessment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(help_text='Assessment title (minimum 2 characters)', max_length=255, validators=[django.core.validators.MinLengthValidator(2)])),
                ('description', models.TextField(blank=True, default='', help_text='Assessment description or instructions')),
                ('passing_score', models.PositiveIntegerField(default=70, help_text='Passing score percentage (0-100)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100), courses.validators.validate_percentage])),
                ('max_attempts', models.PositiveIntegerField(default=3, help_text='Maximum number of attempts allowed', validators=[django.core.validators.MinValueValidator(1)])),
                ('time_limit', models.PositiveIntegerField(default=0, help_text='Time limit in minutes, 0 means no limit')),
                ('time_limit_minutes', models.PositiveIntegerField(default=0, help_text='Alias for time_limit for backward compatibility')),
                ('randomize_questions', models.BooleanField(default=False, help_text='Randomize question order for each attempt')),
                ('show_correct_answers', models.BooleanField(default=True, help_text='Show correct answers after completion')),
                ('show_results', models.BooleanField(default=True, help_text='Show results immediately after completion')),
            ],
            options={
                'verbose_name': 'Assessment',
                'verbose_name_plural': 'Assessments',
            },
        ),
        migrations.CreateModel(
            name='Lesson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('order', models.PositiveIntegerField(default=0)),
                ('duration_minutes', models.PositiveIntegerField(blank=True, help_text='Duration in minutes', null=True)),
                ('title', models.CharField(default='', help_text='Lesson title (minimum 2 characters)', max_length=255, validators=[courses.validators.MinStrLenValidator(2)])),
                ('content', models.TextField(blank=True, default='', help_text='Full content visible to authorized users (minimum 10 characters)', null=True, validators=[courses.validators.MinStrLenValidator(10)])),
                ('guest_content', models.TextField(blank=True, default='', help_text='Preview content for unregistered users')),
                ('registered_content', models.TextField(blank=True, default='', help_text='Limited content for registered users')),
                ('access_level', models.CharField(choices=[('guest', 'Guest - Unregistered Users'), ('registered', 'Registered - Logged In Users'), ('premium', 'Premium - Paid Subscribers'), ('enterprise', 'Enterprise - Corporate Users')], default='registered', help_text='Minimum access level required to view this lesson', max_length=20)),
                ('type', models.CharField(choices=[('video', 'Video'), ('reading', 'Reading'), ('interactive', 'Interactive'), ('quiz', 'Quiz'), ('lab_exercise', 'Lab Exercise'), ('assignment', 'Assignment'), ('discussion', 'Discussion'), ('live_session', 'Live Session'), ('download', 'Download')], default='video', help_text='Type of lesson content', max_length=20)),
                ('activity_type', models.CharField(choices=[('video', 'Video'), ('reading', 'Reading'), ('quiz', 'Quiz'), ('assignment', 'Assignment'), ('discussion', 'Discussion'), ('interactive', 'Interactive'), ('livestream', 'Live Stream'), ('other', 'Other')], default='video', help_text='Type of learning activity in this lesson', max_length=20)),
                ('has_assessment', models.BooleanField(default=False, help_text='Whether lesson includes an assessment')),
                ('has_lab', models.BooleanField(default=False, help_text='Whether lesson includes a lab exercise')),
                ('is_free_preview', models.BooleanField(default=False, help_text='Whether lesson is available as free preview')),
                ('video_url', models.URLField(blank=True, default='', help_text='URL for video content', validators=[courses.validators.validate_video_url])),
                ('transcript', models.TextField(blank=True, default='', help_text='Video transcript or lesson transcript')),
            ],
            options={
                'verbose_name': 'Lesson',
                'verbose_name_plural': 'Lessons',
                'ordering': ['module', 'order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AssessmentAttempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('start_time', models.DateTimeField(auto_now_add=True, help_text='When attempt was started')),
                ('end_time', models.DateTimeField(blank=True, help_text='When attempt was completed', null=True)),
                ('time_taken_seconds', models.PositiveIntegerField(default=0)),
                ('score', models.PositiveIntegerField(default=0, help_text='Raw score achieved')),
                ('max_score', models.PositiveIntegerField(default=0)),
                ('is_completed', models.BooleanField(default=False)),
                ('is_passed', models.BooleanField(default=False, help_text='Whether attempt passed the assessment')),
                ('passed', models.BooleanField(default=False, help_text='Alias for is_passed for backward compatibility')),
                ('attempt_number', models.PositiveIntegerField(default=1, help_text='Attempt number for this user/assessment combination')),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='IP address of the user during attempt', null=True)),
                ('user_agent', models.TextField(blank=True, default='', help_text='User agent string during attempt')),
                ('assessment', models.ForeignKey(help_text='Assessment being attempted', on_delete=django.db.models.deletion.CASCADE, related_name='attempts', to='courses.assessment')),
                ('user', models.ForeignKey(help_text='User taking the assessment', on_delete=django.db.models.deletion.CASCADE, related_name='assessment_attempts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Assessment Attempt',
                'verbose_name_plural': 'Assessment Attempts',
                'ordering': ['-created_date'],
            },
        ),
        migrations.CreateModel(
            name='Bookmark',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('object_id', models.CharField(db_index=True, help_text='ID of the bookmarked object (supports both integer and UUID)', max_length=255)),
                ('title', models.CharField(blank=True, default='', help_text='Custom title for the bookmark', max_length=200)),
                ('notes', models.TextField(blank=True, default='', help_text='Personal notes about the bookmarked content', null=True)),
                ('position', models.PositiveIntegerField(default=0, help_text='Order position for bookmark organization')),
                ('is_favorite', models.BooleanField(default=False, help_text='Whether this bookmark is marked as favorite')),
                ('tags', models.JSONField(blank=True, default=list, help_text='Tags for organizing bookmarks', validators=[courses.validators.JSONListValidator(max_items=10, min_str_len=2)])),
                ('content_type', models.ForeignKey(help_text='Type of content being bookmarked', on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('user', models.ForeignKey(help_text='User who created this bookmark', on_delete=django.db.models.deletion.CASCADE, related_name='bookmarks', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Bookmark',
                'verbose_name_plural': 'Bookmarks',
                'db_table': 'courses_bookmark',
                'ordering': ['position', '-created_date'],
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('slug', models.SlugField(blank=True, max_length=180, unique=True)),
                ('is_active', models.BooleanField(default=True)),
                ('name', models.CharField(default='', help_text='Category name (minimum 2 characters)', max_length=100, unique=True, validators=[courses.validators.MinStrLenValidator(2)])),
                ('description', models.TextField(blank=True, default='', help_text='Optional category description')),
                ('icon', models.CharField(blank=True, default='', help_text='CSS icon class', max_length=50)),
                ('sort_order', models.PositiveIntegerField(default=0, help_text='Sort order for display')),
                ('featured', models.BooleanField(default=False, help_text='Whether category is featured on homepage')),
                ('parent', models.ForeignKey(blank=True, help_text='Parent category for hierarchy', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='category_children', to='courses.category')),
            ],
            options={
                'verbose_name': 'Category',
                'verbose_name_plural': 'Categories',
                'ordering': ['sort_order', 'name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('slug', models.SlugField(blank=True, max_length=180, unique=True)),
                ('duration_minutes', models.PositiveIntegerField(blank=True, help_text='Duration in minutes', null=True)),
                ('is_published', models.BooleanField(default=False)),
                ('published_date', models.DateTimeField(blank=True, null=True)),
                ('view_count', models.PositiveIntegerField(default=0)),
                ('last_accessed', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(default='', help_text='Course title (minimum 3 characters)', max_length=160, validators=[courses.validators.MinStrLenValidator(3)])),
                ('subtitle', models.CharField(blank=True, default='', help_text='Optional course subtitle', max_length=255)),
                ('description', models.TextField(blank=True, default='', help_text='Course description (minimum 50 characters)', null=True, validators=[courses.validators.MinStrLenValidator(50)])),
                ('thumbnail', models.ImageField(blank=True, help_text='Course thumbnail', null=True, upload_to='course_thumbnails/')),
                ('price', models.DecimalField(decimal_places=2, default=Decimal('49.99'), help_text='Course price (decimal precision)', max_digits=8, validators=[django.core.validators.MinValueValidator(Decimal('0')), courses.validators.validate_price_range])),
                ('discount_price', models.DecimalField(blank=True, decimal_places=2, help_text='Discounted price (optional, decimal precision)', max_digits=8, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0')), courses.validators.validate_price_range])),
                ('discount_ends', models.DateTimeField(blank=True, help_text='Discount expiration date', null=True)),
                ('level', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced'), ('all_levels', 'All Levels')], default='all_levels', help_text='Course difficulty level', max_length=20)),
                ('has_certificate', models.BooleanField(default=False, help_text='Whether course offers completion certificate')),
                ('is_featured', models.BooleanField(default=False, help_text='Whether course is featured on homepage')),
                ('requirements', models.JSONField(blank=True, default=list, help_text='List of course requirements', validators=[courses.validators.JSONListValidator(max_items=20, min_str_len=3)])),
                ('skills', models.JSONField(blank=True, default=list, help_text='List of skills students will learn', validators=[courses.validators.JSONListValidator(max_items=15, min_str_len=2)])),
                ('learning_objectives', models.JSONField(blank=True, default=list, help_text='List of learning objectives', validators=[courses.validators.JSONListValidator(max_items=15, min_str_len=5)])),
                ('target_audience', models.TextField(blank=True, default='', help_text='Description of target audience')),
                ('creation_method', models.CharField(choices=[('builder', 'Drag & Drop Builder'), ('wizard', 'Step-by-Step Wizard'), ('ai', 'AI-Powered Builder'), ('import', 'Imported Course'), ('manual', 'Manual Creation'), ('template', 'From Template')], default='builder', help_text='Method used to create course', max_length=20)),
                ('completion_status', models.CharField(choices=[('not_started', 'Not Started'), ('in_progress', 'In Progress'), ('partially_complete', 'Partially Complete'), ('complete', 'Complete'), ('published', 'Published'), ('archived', 'Archived'), ('suspended', 'Suspended')], default='not_started', help_text='Course completion status', max_length=20)),
                ('completion_percentage', models.IntegerField(default=0, help_text='Completion percentage (0-100)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100), courses.validators.validate_percentage])),
                ('version', models.DecimalField(decimal_places=1, default=Decimal('1.0'), help_text='Course version number (decimal precision)', max_digits=4)),
                ('is_draft', models.BooleanField(default=True, help_text='Whether course is in draft state')),
                ('meta_keywords', models.CharField(blank=True, default='', help_text='SEO meta keywords', max_length=255)),
                ('meta_description', models.TextField(blank=True, default='', help_text='SEO meta description', null=True)),
                ('sort_order', models.PositiveIntegerField(default=0, help_text='Sort order for catalog display')),
                ('enrolled_students_count', models.PositiveIntegerField(default=0, help_text='Cached count of enrolled students')),
                ('avg_rating', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Average rating from reviews (decimal precision)', max_digits=3)),
                ('total_reviews', models.PositiveIntegerField(default=0, help_text='Total number of reviews')),
                ('last_enrollment_date', models.DateTimeField(blank=True, help_text='Date of last student enrollment', null=True)),
                ('category', models.ForeignKey(default=courses.models.core.get_default_category, help_text='Course category', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='courses', to='courses.category')),
                ('parent_version', models.ForeignKey(blank=True, help_text='Parent course version for cloned courses', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='course_versions', to='courses.course')),
            ],
            options={
                'verbose_name': 'Course',
                'verbose_name_plural': 'Courses',
                'ordering': ['-created_date'],
                'abstract': False,
            },
            bases=(models.Model, courses.models.core.AnalyticsCourseMixin),
        ),
        migrations.CreateModel(
            name='CourseStats',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('total_students', models.PositiveIntegerField(default=0)),
                ('active_students', models.PositiveIntegerField(default=0)),
                ('completion_count', models.PositiveIntegerField(default=0)),
                ('average_completion_days', models.PositiveIntegerField(default=0)),
                ('engagement_score', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('assessment_stats', models.JSONField(blank=True, default=dict)),
                ('revenue_data', models.JSONField(blank=True, default=dict)),
                ('course', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='stats', to='courses.course')),
            ],
            options={
                'verbose_name_plural': 'Course stats',
            },
        ),
        migrations.CreateModel(
            name='Enrollment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('completed', 'Completed'), ('dropped', 'Dropped'), ('suspended', 'Suspended'), ('unenrolled', 'Unenrolled'), ('expired', 'Expired'), ('pending', 'Pending')], default='active', help_text='Enrollment status', max_length=20)),
                ('completion_date', models.DateTimeField(blank=True, help_text='Date when course was completed', null=True)),
                ('last_accessed', models.DateTimeField(blank=True, help_text='Last time student accessed the course', null=True)),
                ('enrolled_date', models.DateTimeField(auto_now_add=True, help_text='Date when student enrolled')),
                ('total_time_spent', models.PositiveIntegerField(default=0, help_text='Total time spent in seconds')),
                ('progress_percentage', models.PositiveIntegerField(default=0, help_text='Enrollment progress percentage (0-100)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100), courses.validators.validate_percentage])),
                ('course', models.ForeignKey(help_text='Enrolled course', on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to='courses.course')),
                ('user', models.ForeignKey(help_text='Enrolled student', on_delete=django.db.models.deletion.CASCADE, related_name='student_enrollments', to=settings.AUTH_USER_MODEL)),
                ('last_lesson_accessed', models.ForeignKey(blank=True, help_text='Last lesson accessed by student', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='last_accessed_enrollments', to='courses.lesson')),
            ],
            options={
                'verbose_name': 'Enrollment',
                'verbose_name_plural': 'Enrollments',
                'ordering': ['-created_date'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Certificate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('certificate_number', models.CharField(help_text='Unique certificate number', max_length=50, unique=True, validators=[django.core.validators.RegexValidator(code='invalid_certificate_format', message='Certificate number must follow format: CERT-{course_id}-{user_id}-{17-digit-timestamp}-{uuid}', regex='^CERT-\\d{6}-\\d{6}-\\d{17}-[A-F0-9]{4}$'), courses.validators.validate_certificate_number])),
                ('is_valid', models.BooleanField(default=True, help_text='Whether certificate is valid')),
                ('revocation_date', models.DateTimeField(blank=True, help_text='Date when certificate was revoked', null=True)),
                ('revocation_reason', models.TextField(blank=True, default='', help_text='Reason for certificate revocation')),
                ('verification_hash', models.CharField(blank=True, help_text='SHA-256 hash for verification', max_length=64, unique=True)),
                ('template_version', models.CharField(default='1.0', help_text='Certificate template version', max_length=10)),
                ('enrollment', models.OneToOneField(help_text='Associated enrollment', on_delete=django.db.models.deletion.CASCADE, related_name='certificate', to='courses.enrollment')),
            ],
            options={
                'verbose_name': 'Certificate',
                'verbose_name_plural': 'Certificates',
                'ordering': ['-created_date'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CourseProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('completion_percentage', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Course completion percentage (0.00 to 100.00)', max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0')), django.core.validators.MaxValueValidator(Decimal('100'))])),
                ('last_accessed', models.DateTimeField(blank=True, help_text='Last time the user accessed this course', null=True)),
                ('started_at', models.DateTimeField(auto_now_add=True, help_text='When the user first started this course')),
                ('completed_at', models.DateTimeField(blank=True, help_text='When the user completed this course', null=True)),
                ('total_time_spent', models.PositiveIntegerField(default=0, help_text='Total time spent on this course in seconds')),
                ('lessons_completed', models.PositiveIntegerField(default=0, help_text='Number of lessons completed')),
                ('assessments_passed', models.PositiveIntegerField(default=0, help_text='Number of assessments passed')),
                ('study_streak_days', models.PositiveIntegerField(default=0, help_text='Consecutive days of course activity')),
                ('last_study_date', models.DateField(blank=True, help_text='Last date the user studied this course', null=True)),
                ('course', models.ForeignKey(help_text='Associated course', on_delete=django.db.models.deletion.CASCADE, related_name='student_progress', to='courses.course')),
                ('user', models.ForeignKey(help_text='Student user', on_delete=django.db.models.deletion.CASCADE, related_name='course_progress_records', to=settings.AUTH_USER_MODEL)),
                ('current_lesson', models.ForeignKey(blank=True, help_text='The lesson the user is currently on', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='current_for_users', to='courses.lesson')),
            ],
            options={
                'verbose_name': 'Course Progress',
                'verbose_name_plural': 'Course Progress Records',
                'ordering': ['-last_accessed'],
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='assessment',
            name='lesson',
            field=models.OneToOneField(help_text='Associated lesson', on_delete=django.db.models.deletion.CASCADE, related_name='assessment', to='courses.lesson'),
        ),
        migrations.CreateModel(
            name='Module',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('order', models.PositiveIntegerField(default=0)),
                ('duration_minutes', models.PositiveIntegerField(blank=True, help_text='Duration in minutes', null=True)),
                ('is_published', models.BooleanField(default=False)),
                ('published_date', models.DateTimeField(blank=True, null=True)),
                ('title', models.CharField(default='', help_text='Module title (minimum 2 characters)', max_length=255, validators=[courses.validators.MinStrLenValidator(2)])),
                ('description', models.TextField(blank=True, default='', help_text='Module description')),
                ('course', models.ForeignKey(help_text='Parent course', on_delete=django.db.models.deletion.CASCADE, related_name='modules', to='courses.course')),
            ],
            options={
                'verbose_name': 'Module',
                'verbose_name_plural': 'Modules',
                'ordering': ['course', 'order'],
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='lesson',
            name='module',
            field=models.ForeignKey(help_text='Parent module', on_delete=django.db.models.deletion.CASCADE, related_name='lessons', to='courses.module'),
        ),
        migrations.CreateModel(
            name='Note',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('content', models.TextField(help_text='Note content', validators=[django.core.validators.MinLengthValidator(1)])),
                ('timestamp_seconds', models.PositiveIntegerField(default=0, help_text='Timestamp in seconds for video notes')),
                ('is_private', models.BooleanField(default=True, help_text='Whether this note is private to the user')),
                ('tags', models.JSONField(blank=True, default=list, help_text='Tags for organizing notes', validators=[courses.validators.JSONListValidator(max_items=10, min_str_len=2)])),
                ('lesson', models.ForeignKey(help_text='Lesson the note is associated with', on_delete=django.db.models.deletion.CASCADE, related_name='lesson_notes', to='courses.lesson')),
                ('user', models.ForeignKey(help_text='User who created the note', on_delete=django.db.models.deletion.CASCADE, related_name='user_notes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Note',
                'verbose_name_plural': 'Notes',
                'ordering': ['-created_date'],
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=255)),
                ('message', models.TextField()),
                ('notification_type', models.CharField(choices=[('course_update', 'Course Update'), ('reminder', 'Reminder'), ('achievement', 'Achievement'), ('announcement', 'Announcement'), ('feedback', 'Feedback Request'), ('custom', 'Custom')], default='announcement', max_length=255)),
                ('is_read', models.BooleanField(default=False)),
                ('read_date', models.DateTimeField(blank=True, null=True)),
                ('action_url', models.URLField(blank=True)),
                ('course', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='course_notifications', to='courses.course')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='course_notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_date'],
            },
        ),
        migrations.CreateModel(
            name='Progress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('is_completed', models.BooleanField(default=False, help_text='Whether lesson is completed')),
                ('completed_date', models.DateTimeField(blank=True, help_text='Date when lesson was completed', null=True)),
                ('time_spent', models.PositiveIntegerField(default=0, help_text='Time spent on this lesson in seconds')),
                ('progress_percentage', models.PositiveIntegerField(default=0, help_text='Progress within this specific lesson (0-100)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100), courses.validators.validate_percentage])),
                ('notes', models.TextField(blank=True, default='', help_text='Student notes for this lesson')),
                ('last_accessed', models.DateTimeField(blank=True, help_text='Last time lesson was accessed', null=True)),
                ('enrollment', models.ForeignKey(help_text='Associated enrollment', on_delete=django.db.models.deletion.CASCADE, related_name='progress', to='courses.enrollment')),
                ('lesson', models.ForeignKey(help_text='Lesson being tracked', on_delete=django.db.models.deletion.CASCADE, related_name='progress_records', to='courses.lesson')),
            ],
            options={
                'verbose_name': 'Progress',
                'verbose_name_plural': 'Progress Records',
                'ordering': ['-last_accessed'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('question_text', models.TextField(blank=True, default='', help_text='Question text')),
                ('text', models.TextField(blank=True, default='', help_text='Alias for question_text for backward compatibility')),
                ('question_type', models.CharField(choices=[('multiple_choice', 'Multiple Choice'), ('true_false', 'True/False'), ('short_answer', 'Short Answer'), ('essay', 'Essay'), ('matching', 'Matching'), ('fill_blank', 'Fill in the Blank')], default='multiple_choice', help_text='Type of question', max_length=20)),
                ('points', models.PositiveIntegerField(default=1, help_text='Points awarded for correct answer', validators=[django.core.validators.MinValueValidator(1)])),
                ('order', models.PositiveIntegerField(default=1)),
                ('explanation', models.TextField(blank=True, default='', help_text='Explanation shown after answering')),
                ('feedback', models.TextField(blank=True, default='', help_text='Alias for explanation for backward compatibility')),
                ('assessment', models.ForeignKey(help_text='Parent assessment', on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='courses.assessment')),
            ],
            options={
                'verbose_name': 'Question',
                'verbose_name_plural': 'Questions',
                'ordering': ['assessment', 'order'],
            },
        ),
        migrations.CreateModel(
            name='AttemptAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('text_answer', models.TextField(blank=True, default='', help_text='Text answer for open-ended questions')),
                ('is_correct', models.BooleanField(default=False, help_text='Whether the answer is correct')),
                ('points_earned', models.PositiveIntegerField(default=0, help_text='Points earned for this answer')),
                ('feedback', models.TextField(blank=True, default='', help_text='Instructor feedback for this answer')),
                ('answered_at', models.DateTimeField(auto_now_add=True, help_text='When answer was submitted')),
                ('attempt', models.ForeignKey(help_text='Associated assessment attempt', on_delete=django.db.models.deletion.CASCADE, related_name='answers_attempt', to='courses.assessmentattempt')),
                ('selected_answer', models.ForeignKey(blank=True, help_text='Selected answer for multiple choice questions', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_selections', to='courses.answer')),
                ('question', models.ForeignKey(help_text='Question being answered', on_delete=django.db.models.deletion.CASCADE, related_name='user_answers', to='courses.question')),
            ],
            options={
                'verbose_name': 'Attempt Answer',
                'verbose_name_plural': 'Attempt Answers',
                'ordering': ['attempt', 'question'],
            },
        ),
        migrations.AddField(
            model_name='answer',
            name='question',
            field=models.ForeignKey(help_text='Parent question', on_delete=django.db.models.deletion.CASCADE, related_name='answers_question', to='courses.question'),
        ),
        migrations.CreateModel(
            name='Resource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('order', models.PositiveIntegerField(default=0)),
                ('duration_minutes', models.PositiveIntegerField(blank=True, help_text='Duration in minutes', null=True)),
                ('storage_key', models.CharField(blank=True, help_text='Cloud storage path/object name', max_length=512, null=True)),
                ('uploaded', models.BooleanField(default=False, help_text='Whether file uploaded successfully')),
                ('file_size', models.PositiveBigIntegerField(blank=True, help_text='File size in bytes', null=True)),
                ('mime_type', models.CharField(blank=True, help_text='MIME type of uploaded file', max_length=120, null=True)),
                ('title', models.CharField(default='', help_text='Resource title (minimum 2 characters)', max_length=255, validators=[courses.validators.MinStrLenValidator(2)])),
                ('type', models.CharField(choices=[('document', 'Document'), ('video', 'Video'), ('audio', 'Audio'), ('image', 'Image'), ('link', 'External Link'), ('code_sample', 'Code Sample'), ('tool_software', 'Tool/Software'), ('dataset', 'Dataset'), ('template', 'Template'), ('archive', 'Archive/Zip')], help_text='Type of resource', max_length=20)),
                ('description', models.TextField(blank=True, default='', help_text='Resource description')),
                ('file', models.FileField(blank=True, help_text='Uploaded file resource', null=True, upload_to='lesson_resources/')),
                ('url', models.URLField(blank=True, default='', help_text='External URL resource')),
                ('premium', models.BooleanField(default=False, help_text='Whether this resource requires premium subscription')),
                ('download_count', models.PositiveIntegerField(default=0, help_text='Number of times this resource was downloaded')),
                ('lesson', models.ForeignKey(help_text='Parent lesson', on_delete=django.db.models.deletion.CASCADE, related_name='resources', to='courses.lesson')),
            ],
            options={
                'verbose_name': 'Resource',
                'verbose_name_plural': 'Resources',
                'ordering': ['lesson', 'order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('rating', models.PositiveSmallIntegerField(help_text='Rating from 1 to 5 stars', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('title', models.CharField(blank=True, default='', help_text='Review title', max_length=255)),
                ('content', models.TextField(help_text='Review content (minimum 10 characters)', validators=[django.core.validators.MinLengthValidator(10)])),
                ('helpful_count', models.PositiveIntegerField(default=0, help_text='Number of users who found this review helpful')),
                ('is_verified_purchase', models.BooleanField(default=False, help_text='Whether reviewer is enrolled in the course')),
                ('is_approved', models.BooleanField(default=True, help_text='Whether review is approved for display')),
                ('is_featured', models.BooleanField(default=False, help_text='Whether review is featured')),
                ('moderation_notes', models.TextField(blank=True, default='', help_text='Internal moderation notes')),
                ('course', models.ForeignKey(help_text='Course being reviewed', on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='courses.course')),
                ('user', models.ForeignKey(help_text='User who wrote the review', on_delete=django.db.models.deletion.CASCADE, related_name='course_reviews', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Review',
                'verbose_name_plural': 'Reviews',
                'ordering': ['-created_date'],
            },
        ),
        migrations.CreateModel(
            name='UserActivity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('activity_type', models.CharField(choices=[('view_course', 'View Course'), ('start_lesson', 'Start Lesson'), ('complete_lesson', 'Complete Lesson'), ('download_resource', 'Download Resource'), ('take_quiz', 'Take Quiz'), ('post_comment', 'Post Comment'), ('give_review', 'Give Review')], max_length=255)),
                ('data', models.JSONField(blank=True, default=dict)),
                ('assessment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='assessment_activities', to='courses.assessment')),
                ('course', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='course_activities', to='courses.course')),
                ('lesson', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='lesson_activities', to='courses.lesson')),
                ('resource', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='resource_activities', to='courses.resource')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='course_activities', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'User activities',
                'ordering': ['-created_date'],
            },
        ),
        migrations.CreateModel(
            name='UserPreference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('email_notifications', models.BooleanField(default=True, help_text='Receive email notifications for course updates')),
                ('push_notifications', models.BooleanField(default=True, help_text='Receive push notifications on supported devices')),
                ('reminder_frequency', models.CharField(choices=[('never', 'Never'), ('daily', 'Daily'), ('weekly', 'Weekly'), ('biweekly', 'Bi-weekly'), ('monthly', 'Monthly')], default='weekly', help_text='How often to receive study reminders', max_length=20)),
                ('theme', models.CharField(choices=[('system', 'System Default'), ('light', 'Light'), ('dark', 'Dark'), ('high_contrast', 'High Contrast')], default='system', help_text='Visual theme preference', max_length=20)),
                ('language', models.CharField(default='en', help_text='Preferred language code (ISO 639-1)', max_length=10)),
                ('timezone', models.CharField(blank=True, default='', help_text="User's preferred timezone", max_length=50)),
                ('autoplay_videos', models.BooleanField(default=True, help_text='Automatically play videos when starting lessons')),
                ('video_playback_speed', models.DecimalField(decimal_places=2, default=1.0, help_text='Default video playback speed (0.25 to 3.00)', max_digits=3)),
                ('auto_advance_lessons', models.BooleanField(default=False, help_text='Automatically advance to next lesson after completion')),
                ('content_filters', models.JSONField(blank=True, default=dict, help_text='Content filtering preferences as JSON')),
                ('accessibility', models.JSONField(blank=True, default=dict, help_text='Accessibility settings as JSON')),
                ('profile_visibility', models.CharField(choices=[('public', 'Public'), ('students_only', 'Students Only'), ('private', 'Private')], default='students_only', help_text='Who can view your profile and progress', max_length=20)),
                ('show_progress_to_instructors', models.BooleanField(default=True, help_text='Allow instructors to see your detailed progress')),
                ('user', models.OneToOneField(help_text='User these preferences belong to', on_delete=django.db.models.deletion.CASCADE, related_name='course_preferences', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Preference',
                'verbose_name_plural': 'User Preferences',
                'db_table': 'courses_userpreference',
            },
        ),
        migrations.CreateModel(
            name='UserStats',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('courses_enrolled', models.PositiveIntegerField(default=0)),
                ('courses_completed', models.PositiveIntegerField(default=0)),
                ('total_time_spent_seconds', models.PositiveBigIntegerField(default=0)),
                ('assessment_avg_score', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('last_activity', models.DateTimeField(blank=True, null=True)),
                ('activity_streak', models.PositiveIntegerField(default=0)),
                ('learning_habits', models.JSONField(blank=True, default=dict)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='course_stats', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'User stats',
            },
        ),
        migrations.AddIndex(
            model_name='assessmentattempt',
            index=models.Index(fields=['user', 'assessment'], name='courses_ass_user_id_fedd97_idx'),
        ),
        migrations.AddIndex(
            model_name='assessmentattempt',
            index=models.Index(fields=['assessment', '-created_date'], name='courses_ass_assessm_1f3420_idx'),
        ),
        migrations.AddIndex(
            model_name='assessmentattempt',
            index=models.Index(fields=['is_completed', 'is_passed'], name='courses_ass_is_comp_899cc6_idx'),
        ),
        migrations.AddIndex(
            model_name='bookmark',
            index=models.Index(fields=['user', 'position'], name='courses_boo_user_id_9a294c_idx'),
        ),
        migrations.AddIndex(
            model_name='bookmark',
            index=models.Index(fields=['user', 'is_favorite'], name='courses_boo_user_id_8141b3_idx'),
        ),
        migrations.AddIndex(
            model_name='bookmark',
            index=models.Index(fields=['content_type', 'object_id'], name='courses_boo_content_885b7e_idx'),
        ),
        migrations.AddIndex(
            model_name='bookmark',
            index=models.Index(fields=['user', 'content_type', 'object_id'], name='courses_boo_user_id_c5e744_idx'),
        ),
        migrations.AddConstraint(
            model_name='bookmark',
            constraint=models.UniqueConstraint(fields=('user', 'content_type', 'object_id'), name='unique_bookmark_per_user', violation_error_message='You have already bookmarked this content'),
        ),
        migrations.AddIndex(
            model_name='category',
            index=models.Index(fields=['created_date'], name='courses_cat_created_8cf2cb_idx'),
        ),
        migrations.AddIndex(
            model_name='category',
            index=models.Index(fields=['updated_date'], name='courses_cat_updated_67ffb8_idx'),
        ),
        migrations.AddIndex(
            model_name='category',
            index=models.Index(fields=['slug'], name='courses_cat_slug_33564e_idx'),
        ),
        migrations.AddIndex(
            model_name='category',
            index=models.Index(fields=['is_active'], name='courses_cat_is_acti_61a38c_idx'),
        ),
        migrations.AddIndex(
            model_name='category',
            index=models.Index(fields=['sort_order'], name='courses_cat_sort_or_896e38_idx'),
        ),
        migrations.AddIndex(
            model_name='category',
            index=models.Index(fields=['name'], name='courses_cat_name_ab7c10_idx'),
        ),
        migrations.AddIndex(
            model_name='category',
            index=models.Index(fields=['parent'], name='courses_cat_parent__abacdd_idx'),
        ),
        migrations.AddIndex(
            model_name='category',
            index=models.Index(fields=['slug'], name='category_slug_idx'),
        ),
        migrations.AddIndex(
            model_name='category',
            index=models.Index(fields=['is_active', 'featured'], name='courses_cat_is_acti_07f5fd_idx'),
        ),
        migrations.AddConstraint(
            model_name='category',
            constraint=models.UniqueConstraint(fields=('slug',), name='unique_category_slug'),
        ),
        migrations.AddConstraint(
            model_name='category',
            constraint=models.CheckConstraint(condition=models.Q(('sort_order__gte', 0)), name='category_sort_order_positive'),
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['created_date'], name='courses_cou_created_7da7d5_idx'),
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['updated_date'], name='courses_cou_updated_517180_idx'),
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['slug'], name='courses_cou_slug_2e551f_idx'),
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['is_published'], name='courses_cou_is_publ_4b99b9_idx'),
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['published_date'], name='courses_cou_publish_80f4bd_idx'),
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['view_count'], name='courses_cou_view_co_55d4de_idx'),
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['last_accessed'], name='courses_cou_last_ac_9655a6_idx'),
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['category', 'is_published'], name='courses_cou_categor_e9e0ba_idx'),
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['is_featured', 'is_published'], name='courses_cou_is_feat_6821f1_idx'),
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['level', 'is_published'], name='courses_cou_level_a2b259_idx'),
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['parent_version', 'version'], name='courses_cou_parent__886ac7_idx'),
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['creation_method'], name='courses_cou_creatio_6175b0_idx'),
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['completion_status'], name='courses_cou_complet_a28d16_idx'),
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['is_draft'], name='courses_cou_is_draf_460a8b_idx'),
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['price'], name='courses_cou_price_1fbd18_idx'),
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['avg_rating'], name='courses_cou_avg_rat_82cd8e_idx'),
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['slug'], name='course_slug_idx'),
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['is_published', 'completion_status'], name='idx_course_pub_status'),
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['is_featured', 'sort_order'], name='idx_course_feat_sort'),
        ),
        migrations.AddConstraint(
            model_name='course',
            constraint=models.UniqueConstraint(fields=('slug',), name='unique_course_slug'),
        ),
        migrations.AddConstraint(
            model_name='course',
            constraint=models.CheckConstraint(condition=models.Q(('price__gte', 0)), name='course_price_positive'),
        ),
        migrations.AddConstraint(
            model_name='course',
            constraint=models.CheckConstraint(condition=models.Q(('discount_price__gte', 0), ('discount_price__isnull', True), _connector='OR'), name='course_discount_price_positive'),
        ),
        migrations.AddConstraint(
            model_name='course',
            constraint=models.CheckConstraint(condition=models.Q(('version__gt', 0)), name='course_version_positive'),
        ),
        migrations.AddConstraint(
            model_name='course',
            constraint=models.CheckConstraint(condition=models.Q(('discount_price__isnull', True), ('discount_price__lt', models.F('price')), _connector='OR'), name='course_discount_less_than_price'),
        ),
        migrations.AddIndex(
            model_name='coursestats',
            index=models.Index(fields=['course'], name='courses_cou_course__3bcaa8_idx'),
        ),
        migrations.AddIndex(
            model_name='certificate',
            index=models.Index(fields=['created_date'], name='courses_cer_created_6482f3_idx'),
        ),
        migrations.AddIndex(
            model_name='certificate',
            index=models.Index(fields=['updated_date'], name='courses_cer_updated_e6b0b5_idx'),
        ),
        migrations.AddIndex(
            model_name='certificate',
            index=models.Index(fields=['certificate_number'], name='courses_cer_certifi_b5881b_idx'),
        ),
        migrations.AddIndex(
            model_name='certificate',
            index=models.Index(fields=['verification_hash'], name='courses_cer_verific_19df54_idx'),
        ),
        migrations.AddIndex(
            model_name='certificate',
            index=models.Index(fields=['is_valid'], name='courses_cer_is_vali_2f2340_idx'),
        ),
        migrations.AddConstraint(
            model_name='certificate',
            constraint=models.UniqueConstraint(fields=('certificate_number',), name='unique_certificate_number'),
        ),
        migrations.AddConstraint(
            model_name='certificate',
            constraint=models.UniqueConstraint(fields=('verification_hash',), name='unique_verification_hash'),
        ),
        migrations.AddIndex(
            model_name='enrollment',
            index=models.Index(fields=['created_date'], name='courses_enr_created_2cb035_idx'),
        ),
        migrations.AddIndex(
            model_name='enrollment',
            index=models.Index(fields=['updated_date'], name='courses_enr_updated_05225a_idx'),
        ),
        migrations.AddIndex(
            model_name='enrollment',
            index=models.Index(fields=['user', 'status'], name='courses_enr_user_id_ce8b5b_idx'),
        ),
        migrations.AddIndex(
            model_name='enrollment',
            index=models.Index(fields=['course', 'status'], name='courses_enr_course__78d524_idx'),
        ),
        migrations.AddIndex(
            model_name='enrollment',
            index=models.Index(condition=models.Q(('status', 'active')), fields=['user', 'course'], name='idx_enrl_user_course_act'),
        ),
        migrations.AddConstraint(
            model_name='enrollment',
            constraint=models.UniqueConstraint(condition=models.Q(('status', 'unenrolled'), _negated=True), fields=('user', 'course'), name='unique_active_enrollment', violation_error_message='User is already enrolled in this course'),
        ),
        migrations.AddIndex(
            model_name='courseprogress',
            index=models.Index(fields=['created_date'], name='courses_cou_created_6c9322_idx'),
        ),
        migrations.AddIndex(
            model_name='courseprogress',
            index=models.Index(fields=['updated_date'], name='courses_cou_updated_2dc6a5_idx'),
        ),
        migrations.AddIndex(
            model_name='courseprogress',
            index=models.Index(fields=['user', 'course'], name='courses_cou_user_id_06f975_idx'),
        ),
        migrations.AddIndex(
            model_name='courseprogress',
            index=models.Index(fields=['course', 'completion_percentage'], name='courses_cou_course__4ab7f3_idx'),
        ),
        migrations.AddIndex(
            model_name='courseprogress',
            index=models.Index(fields=['user', 'last_accessed'], name='courses_cou_user_id_d1c82f_idx'),
        ),
        migrations.AddConstraint(
            model_name='courseprogress',
            constraint=models.UniqueConstraint(fields=('user', 'course'), name='unique_course_progress'),
        ),
        migrations.AddConstraint(
            model_name='courseprogress',
            constraint=models.CheckConstraint(condition=models.Q(('completion_percentage__gte', 0), ('completion_percentage__lte', 100)), name='course_progress_percentage_range'),
        ),
        migrations.AddConstraint(
            model_name='courseprogress',
            constraint=models.CheckConstraint(condition=models.Q(('lessons_completed__gte', 0)), name='course_progress_lessons_completed_positive'),
        ),
        migrations.AddConstraint(
            model_name='courseprogress',
            constraint=models.CheckConstraint(condition=models.Q(('assessments_passed__gte', 0)), name='course_progress_assessments_passed_positive'),
        ),
        migrations.AddConstraint(
            model_name='courseprogress',
            constraint=models.CheckConstraint(condition=models.Q(('study_streak_days__gte', 0)), name='course_progress_study_streak_positive'),
        ),
        migrations.AddIndex(
            model_name='assessment',
            index=models.Index(fields=['passing_score'], name='courses_ass_passing_b8a83e_idx'),
        ),
        migrations.AddIndex(
            model_name='assessment',
            index=models.Index(fields=['show_results', 'show_correct_answers'], name='courses_ass_show_re_52db30_idx'),
        ),
        migrations.AddIndex(
            model_name='module',
            index=models.Index(fields=['created_date'], name='courses_mod_created_9a6a7d_idx'),
        ),
        migrations.AddIndex(
            model_name='module',
            index=models.Index(fields=['updated_date'], name='courses_mod_updated_141b50_idx'),
        ),
        migrations.AddIndex(
            model_name='module',
            index=models.Index(fields=['order'], name='courses_mod_order_e9c068_idx'),
        ),
        migrations.AddIndex(
            model_name='module',
            index=models.Index(fields=['is_published'], name='courses_mod_is_publ_875329_idx'),
        ),
        migrations.AddIndex(
            model_name='module',
            index=models.Index(fields=['published_date'], name='courses_mod_publish_823717_idx'),
        ),
        migrations.AddIndex(
            model_name='module',
            index=models.Index(fields=['course', 'order'], name='courses_mod_course__20183c_idx'),
        ),
        migrations.AddIndex(
            model_name='module',
            index=models.Index(fields=['course', 'is_published'], name='courses_mod_course__92d7f3_idx'),
        ),
        migrations.AddConstraint(
            model_name='module',
            constraint=models.UniqueConstraint(fields=('course', 'order'), name='unique_module_order'),
        ),
        migrations.AddIndex(
            model_name='lesson',
            index=models.Index(fields=['created_date'], name='courses_les_created_7fbce2_idx'),
        ),
        migrations.AddIndex(
            model_name='lesson',
            index=models.Index(fields=['updated_date'], name='courses_les_updated_ac21ad_idx'),
        ),
        migrations.AddIndex(
            model_name='lesson',
            index=models.Index(fields=['order'], name='courses_les_order_ffd43c_idx'),
        ),
        migrations.AddIndex(
            model_name='lesson',
            index=models.Index(fields=['module', 'order'], name='courses_les_module__4accd4_idx'),
        ),
        migrations.AddIndex(
            model_name='lesson',
            index=models.Index(fields=['access_level'], name='courses_les_access__657329_idx'),
        ),
        migrations.AddIndex(
            model_name='lesson',
            index=models.Index(fields=['type'], name='courses_les_type_805272_idx'),
        ),
        migrations.AddIndex(
            model_name='lesson',
            index=models.Index(fields=['activity_type'], name='courses_les_activit_845908_idx'),
        ),
        migrations.AddIndex(
            model_name='lesson',
            index=models.Index(fields=['is_free_preview'], name='courses_les_is_free_a8e681_idx'),
        ),
        migrations.AddIndex(
            model_name='lesson',
            index=models.Index(fields=['has_assessment'], name='courses_les_has_ass_d9b62a_idx'),
        ),
        migrations.AddIndex(
            model_name='lesson',
            index=models.Index(fields=['has_lab'], name='courses_les_has_lab_01b267_idx'),
        ),
        migrations.AddConstraint(
            model_name='lesson',
            constraint=models.UniqueConstraint(fields=('module', 'order'), name='unique_lesson_order'),
        ),
        migrations.AddIndex(
            model_name='note',
            index=models.Index(fields=['user', 'lesson'], name='courses_not_user_id_eece44_idx'),
        ),
        migrations.AddIndex(
            model_name='note',
            index=models.Index(fields=['lesson', 'is_private'], name='courses_not_lesson__5f16a2_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['user', '-created_date'], name='courses_not_user_id_149621_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['is_read'], name='courses_not_is_read_7c54d4_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['notification_type'], name='courses_not_notific_2eee2c_idx'),
        ),
        migrations.AddIndex(
            model_name='progress',
            index=models.Index(fields=['created_date'], name='courses_pro_created_6822b9_idx'),
        ),
        migrations.AddIndex(
            model_name='progress',
            index=models.Index(fields=['updated_date'], name='courses_pro_updated_f54b15_idx'),
        ),
        migrations.AddIndex(
            model_name='progress',
            index=models.Index(fields=['enrollment', 'is_completed'], name='courses_pro_enrollm_e8bb03_idx'),
        ),
        migrations.AddIndex(
            model_name='progress',
            index=models.Index(fields=['lesson', 'is_completed'], name='courses_pro_lesson__76321e_idx'),
        ),
        migrations.AddIndex(
            model_name='progress',
            index=models.Index(fields=['enrollment', 'lesson'], name='courses_pro_enrollm_96426f_idx'),
        ),
        migrations.AddConstraint(
            model_name='progress',
            constraint=models.UniqueConstraint(fields=('enrollment', 'lesson'), name='unique_progress_record'),
        ),
        migrations.AddIndex(
            model_name='question',
            index=models.Index(fields=['assessment', 'order'], name='courses_que_assessm_2927ae_idx'),
        ),
        migrations.AddIndex(
            model_name='question',
            index=models.Index(fields=['question_type'], name='courses_que_questio_beffac_idx'),
        ),
        migrations.AddConstraint(
            model_name='question',
            constraint=models.UniqueConstraint(fields=('assessment', 'order'), name='unique_question_order', violation_error_message='Question order must be unique per assessment'),
        ),
        migrations.AddIndex(
            model_name='attemptanswer',
            index=models.Index(fields=['attempt', 'question'], name='courses_att_attempt_aab6c9_idx'),
        ),
        migrations.AddIndex(
            model_name='attemptanswer',
            index=models.Index(fields=['is_correct'], name='courses_att_is_corr_be0997_idx'),
        ),
        migrations.AddConstraint(
            model_name='attemptanswer',
            constraint=models.UniqueConstraint(fields=('attempt', 'question'), name='unique_attempt_answer'),
        ),
        migrations.AddIndex(
            model_name='answer',
            index=models.Index(fields=['question', 'order'], name='courses_ans_questio_aedf7d_idx'),
        ),
        migrations.AddIndex(
            model_name='answer',
            index=models.Index(fields=['is_correct'], name='courses_ans_is_corr_9dd4bc_idx'),
        ),
        migrations.AddConstraint(
            model_name='answer',
            constraint=models.UniqueConstraint(fields=('question', 'order'), name='unique_answer_order', violation_error_message='Answer order must be unique per question'),
        ),
        migrations.AddIndex(
            model_name='resource',
            index=models.Index(fields=['created_date'], name='courses_res_created_2d1e4f_idx'),
        ),
        migrations.AddIndex(
            model_name='resource',
            index=models.Index(fields=['updated_date'], name='courses_res_updated_5e9c80_idx'),
        ),
        migrations.AddIndex(
            model_name='resource',
            index=models.Index(fields=['order'], name='courses_res_order_e289a6_idx'),
        ),
        migrations.AddIndex(
            model_name='resource',
            index=models.Index(fields=['uploaded'], name='courses_res_uploade_42c1ed_idx'),
        ),
        migrations.AddIndex(
            model_name='resource',
            index=models.Index(fields=['mime_type'], name='courses_res_mime_ty_616554_idx'),
        ),
        migrations.AddIndex(
            model_name='resource',
            index=models.Index(fields=['lesson', 'order'], name='courses_res_lesson__12dbf2_idx'),
        ),
        migrations.AddIndex(
            model_name='resource',
            index=models.Index(fields=['type'], name='courses_res_type_380823_idx'),
        ),
        migrations.AddIndex(
            model_name='resource',
            index=models.Index(fields=['premium'], name='courses_res_premium_945503_idx'),
        ),
        migrations.AddConstraint(
            model_name='resource',
            constraint=models.UniqueConstraint(fields=('lesson', 'order'), name='unique_resource_order'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['course', '-created_date'], name='courses_rev_course__c5c65a_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['user', '-created_date'], name='courses_rev_user_id_6a1f95_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['is_approved', 'is_featured'], name='courses_rev_is_appr_03a92f_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['rating'], name='courses_rev_rating_004eae_idx'),
        ),
        migrations.AddConstraint(
            model_name='review',
            constraint=models.UniqueConstraint(fields=('user', 'course'), name='unique_user_course_review'),
        ),
        migrations.AddIndex(
            model_name='useractivity',
            index=models.Index(fields=['user', '-created_date'], name='courses_use_user_id_b38400_idx'),
        ),
        migrations.AddIndex(
            model_name='useractivity',
            index=models.Index(fields=['course', '-created_date'], name='courses_use_course__fa711b_idx'),
        ),
        migrations.AddIndex(
            model_name='useractivity',
            index=models.Index(fields=['activity_type'], name='courses_use_activit_804475_idx'),
        ),
        migrations.AddIndex(
            model_name='userpreference',
            index=models.Index(fields=['theme'], name='courses_use_theme_92da9e_idx'),
        ),
        migrations.AddIndex(
            model_name='userpreference',
            index=models.Index(fields=['language'], name='courses_use_languag_9ff8cf_idx'),
        ),
        migrations.AddIndex(
            model_name='userpreference',
            index=models.Index(fields=['profile_visibility'], name='courses_use_profile_c01d2b_idx'),
        ),
        migrations.AddIndex(
            model_name='userstats',
            index=models.Index(fields=['user'], name='courses_use_user_id_689f8b_idx'),
        ),
        migrations.AddIndex(
            model_name='userstats',
            index=models.Index(fields=['activity_streak', 'last_activity'], name='courses_use_activit_2aa706_idx'),
        ),
    ]
