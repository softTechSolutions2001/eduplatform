# fmt: off
# fmt: skip
# isort: skip
"""
Django settings for educore project.

Generated by 'django-admin startproject' using Django 5.2.

File: backend/educore/settings.py
Version: 4.1.0
Date: 2025-05-23 17:34:53
Author: mohithasanthanam
Last Modified: 2025-05-23 17:34:53 UTC

Enhanced settings with file upload support for course management.
Added configurations for:
- File upload handling for course thumbnails
- Enhanced security settings for file uploads
- Improved CORS configuration
- Better error handling and logging

Connected files that depend on these settings:
- backend/instructor_portal/views.py - File upload handling
- backend/instructor_portal/serializers.py - File field validation
- backend/educore/urls.py - Media file serving
- frontend/src/services/instructorService.js - File upload API calls
"""
import os
from pathlib import Path
from datetime import timedelta
from .db_settings import *
from dotenv import load_dotenv
import mimetypes

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-uj&@kx(m@6=@5r=93repv_gxc_5boe-er-bkoyjikaq-rlp5(1'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True  # Set to True for development

# Allow both your public domain AND localhost
ALLOWED_HOSTS = [
    'yourdomain.com',
    'www.yourdomain.com',
    'localhost',
    '127.0.0.1',
]

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',  # Required for django-allauth
    # Third party apps
    'rest_framework',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
    'corsheaders',
    'django_extensions',
    'debug_toolbar',
    'django_celery_beat',
    # Social authentication apps
    'social_django',  # For Python Social Auth
    'allauth',        # For additional OAuth providers
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'allauth.socialaccount.providers.github',
    # Local apps
    'users',
    'courses',
    'instructor_portal',
    'content',
    'ai_course_builder',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',
    # For social auth exceptions
    'social_django.middleware.SocialAuthExceptionMiddleware',
    'allauth.account.middleware.AccountMiddleware',  # Required for django-allauth
]

ROOT_URLCONF = 'educore.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.static',
                'social_django.context_processors.backends',  # For social auth
                'social_django.context_processors.login_redirect',  # For social auth
            ],
        },
    },
]

WSGI_APPLICATION = 'educore.wsgi.application'

# Database configuration
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('DB_NAME', 'eduplatform_prod'),
        'USER': os.getenv('DB_USER', 'eduplatform'),
        'PASSWORD': os.getenv('DB_PASSWORD', ''),
        'HOST': os.getenv('DB_HOST', 'localhost'),
        'PORT': os.getenv('DB_PORT', '5432'),
        'CONN_MAX_AGE': 600,
    }
}

# Authentication backends
AUTHENTICATION_BACKENDS = [
    'social_core.backends.google.GoogleOAuth2',   # Google OAuth2
    'social_core.backends.github.GithubOAuth2',   # GitHub OAuth
    'django.contrib.auth.backends.ModelBackend',  # Default Django backend
]

# Frontend URL for redirects
FRONTEND_URL = os.environ.get('FRONTEND_URL', 'http://localhost:5173')

# Enhanced Social Auth Settings (Updated 2025-05-21 by cadsanthanam)
# Get from Google Developer Console
SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = '99067790447-go0pcefo3nt1b9d0udei65u0or6nb0a0.apps.googleusercontent.com'
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = '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'
# Get from GitHub Developer Settings
SOCIAL_AUTH_GITHUB_KEY = 'YOUR_GITHUB_CLIENT_ID'
SOCIAL_AUTH_GITHUB_SECRET = 'YOUR_GITHUB_CLIENT_SECRET'

# Enable JSON field storage
SOCIAL_AUTH_JSONFIELD_ENABLED = True
SOCIAL_AUTH_ALLOW_ASSOCIATION_BY_EMAIL = True

# Enable PKCE in OAuth2 flows for enhanced security
SOCIAL_AUTH_PKCE_ENABLED = True

# State parameter validation for CSRF protection
SOCIAL_AUTH_STATE_PARAMETER = True

# Set specific redirect URLs for providers
SOCIAL_AUTH_GOOGLE_OAUTH2_REDIRECT_URI = f"{FRONTEND_URL}/auth/social/google/callback"
SOCIAL_AUTH_GITHUB_REDIRECT_URI = f"{FRONTEND_URL}/auth/social/github/callback"

# Redirect URLs after login/error (backend)
SOCIAL_AUTH_LOGIN_REDIRECT_URL = '/api/user/social/complete/'
SOCIAL_AUTH_LOGIN_ERROR_URL = f"{FRONTEND_URL}/login?error=social_auth_error"

# Set response types and scopes
SOCIAL_AUTH_GOOGLE_OAUTH2_RESPONSE_TYPE = 'code'
SOCIAL_AUTH_GOOGLE_OAUTH2_SCOPE = ['email', 'profile']

# OAuth backend-specific settings
SOCIAL_AUTH_BACKENDS = {
    'google-oauth2': {
        'SCOPE': ['profile', 'email'],
        'AUTH_PARAMS': {
            'access_type': 'offline',
            'prompt': 'consent'
        },
        'USE_PKCE': True,  # Enable PKCE for Google OAuth
    },
    'github': {
        'SCOPE': ['user:email'],
        'USE_PKCE': True,  # Enable PKCE for GitHub OAuth
    },
}

# Define JSON fields from social profiles to populate user
SOCIAL_AUTH_PIPELINE = (
    'social_core.pipeline.social_auth.social_details',
    'social_core.pipeline.social_auth.social_uid',
    'social_core.pipeline.social_auth.auth_allowed',
    'social_core.pipeline.social_auth.social_user',
    'social_core.pipeline.user.get_username',
    'social_core.pipeline.user.create_user',
    'social_core.pipeline.social_auth.associate_user',
    'social_core.pipeline.social_auth.load_extra_data',
    'social_core.pipeline.user.user_details',
    'users.pipeline.get_profile_data',  # Custom pipeline to handle extra profile data
)

# Additional settings for better error handling
SOCIAL_AUTH_RAISE_EXCEPTIONS = True

# For django-allauth
SITE_ID = 1
ACCOUNT_EMAIL_VERIFICATION = 'none'  # Override previous value

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
LANGUAGE_CODE = 'en-in'
TIME_ZONE = 'Asia/Kolkata'
USE_I18N = False
USE_L10N = True
USE_TZ = True
CURRENCY = 'INR'
CURRENCY_SYMBOL = 'â‚¹'

# Static files (CSS, JavaScript, Images)
STATIC_URL = os.getenv('STATIC_URL', '/static/')
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'staticfiles'),
]
STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
]

# Use simpler storage for static files
STATICFILES_STORAGE = 'whitenoise.storage.StaticFilesStorage'

# Whitenoise configuration for static files
WHITENOISE_USE_FINDERS = True
WHITENOISE_AUTOREFRESH = True
WHITENOISE_MANIFEST_STRICT = False

# MEDIA FILES CONFIGURATION
# ========================
# Enhanced media file settings for course thumbnails and file uploads

# URL that handles the media served from MEDIA_ROOT
MEDIA_URL = os.getenv('MEDIA_URL', '/media/')

# Absolute filesystem path to the directory that will hold user-uploaded files
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Create media directory if it doesn't exist
os.makedirs(MEDIA_ROOT, exist_ok=True)

# FILE UPLOAD SETTINGS
# ===================
# Enhanced file upload settings for course management

# Maximum size in bytes for files uploaded through forms
FILE_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB

# Maximum size in bytes for request data (including file uploads)
DATA_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB

# Maximum number of files that can be uploaded in a single request
DATA_UPLOAD_MAX_NUMBER_FILES = 5

# Allowed file extensions for course thumbnails
ALLOWED_IMAGE_EXTENSIONS = ['.jpg', '.jpeg', '.png', '.gif', '.webp']

# Maximum file size for course thumbnails (in bytes)
MAX_THUMBNAIL_SIZE = 5 * 1024 * 1024  # 5MB

# SECURITY SETTINGS FOR FILE UPLOADS
# ==================================

# Prevent execution of uploaded files
SECURE_CONTENT_TYPE_NOSNIFF = True

# File upload handlers (default is fine for most cases)
FILE_UPLOAD_HANDLERS = [
    'django.core.files.uploadhandler.MemoryFileUploadHandler',
    'django.core.files.uploadhandler.TemporaryFileUploadHandler',
]

# Storage backend for media files (default local storage)
DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# REST Framework settings - JWT Authentication prioritized
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        # Allow unauthenticated users to read, but not write
        'rest_framework.permissions.IsAuthenticatedOrReadOnly',
    ],
    'DEFAULT_THROTTLE_RATES': {
        'user': '1000/day',        # Default user throttle
        'anon': '100/day',         # Default anonymous user throttle
        'sensitive_api': '100/hour',   # For sensitive endpoints
        'api': '1000/hour',        # General API throttle rate
        'login': '20/hour',        # Login attempt throttle
        'register': '10/hour',     # Registration throttle
        'password_reset': '5/hour' # Password reset throttle
    },
}

# JWT Authentication settings
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(hours=1),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': True,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
}

# CORS settings
CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173",  # Vite default port
    "http://localhost:3000",  # Common React port
    "http://127.0.0.1:5173",
    "http://127.0.0.1:3000",
]

# Add these critical CORS settings for authentication
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

# Custom user model
AUTH_USER_MODEL = 'users.CustomUser'

# Email verification settings
EMAIL_VERIFICATION_TIMEOUT_DAYS = 2  # Days

# Security settings
SECURE_SSL_REDIRECT = os.getenv(
    'SECURE_SSL_REDIRECT', 'False').lower() == 'true'
SECURE_HSTS_SECONDS = 3600
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_PRELOAD = True
SECURE_BROWSER_XSS_FILTER = True
SESSION_COOKIE_SECURE = SECURE_SSL_REDIRECT
CSRF_COOKIE_SECURE = SECURE_SSL_REDIRECT
X_FRAME_OPTIONS = 'DENY'

# Logging configuration
# Create a portable logs directory inside the project
BASE_LOG_DIR = Path(BASE_DIR, 'logs')
BASE_LOG_DIR.mkdir(exist_ok=True)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {name} {process:d} {thread:d} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'DEBUG',  # Changed from WARNING to DEBUG to capture all our enhanced logs
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': str(BASE_LOG_DIR / 'error.log'),
            'maxBytes': 5_000_000,   # 5 MB
            'backupCount': 5,
            'formatter': 'verbose',
        },
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file', 'console'],
            'level': 'WARNING',
            'propagate': True,
        },
        # Add specific logger for instructor portal to capture our enhanced validation errors
        'instructor_portal': {
            'handlers': ['file', 'console'],
            'level': 'DEBUG',
            'propagate': False,  # Don't propagate to root logger to avoid duplicate entries
        },
        # Add logger for our custom validation debugging
        '__main__': {
            'handlers': ['file', 'console'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
}

# Debug Toolbar settings
INTERNAL_IPS = [
    '127.0.0.1',
]

# Add proper MIME types
mimetypes.add_type("text/css", ".css", True)
mimetypes.add_type("text/javascript", ".js", True)

# Celery settings
CELERY_BROKER_URL = os.environ.get('REDIS_URL', 'redis://localhost:6379/0')
CELERY_RESULT_BACKEND = os.environ.get('REDIS_URL', 'redis://localhost:6379/0')
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT = 30 * 60  # 30 minutes

# AI Course Builder settings
AI_BUILDER_DEFAULT_MODEL = os.environ.get('AI_BUILDER_DEFAULT_MODEL', 'gpt-4o-mini')
AI_GENERATION_TIMEOUT = int(os.environ.get('AI_GENERATION_TIMEOUT', 60000))  # milliseconds

# File version: 4.1.0
# Last updated: 2025-06-06 by AI course builder implementation
