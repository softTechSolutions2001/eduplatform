# Generated by Django 5.2 on 2025-07-11 14:35

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import instructor_portal.models.utils
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('courses', '0003_alter_course_completion_status_alter_course_level_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CourseTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Template Name')),
                ('description', models.TextField(verbose_name='Template Description')),
                ('template_type', models.CharField(choices=[('academic', 'Academic Course'), ('professional', 'Professional Training'), ('creative', 'Creative Skills'), ('technical', 'Technical Training'), ('business', 'Business Skills'), ('language', 'Language Learning')], max_length=30, verbose_name='Template Type')),
                ('template_data', models.JSONField(help_text='JSON structure for the course template', verbose_name='Template Data')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('is_premium', models.BooleanField(default=False, help_text='Only available to higher tier instructors', verbose_name='Premium Template')),
                ('required_tier', models.CharField(choices=[('bronze', 'Bronze'), ('silver', 'Silver'), ('gold', 'Gold'), ('platinum', 'Platinum'), ('diamond', 'Diamond')], default='bronze', max_length=30, verbose_name='Required Tier')),
                ('usage_count', models.PositiveIntegerField(default=0, verbose_name='Usage Count')),
                ('success_rate', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='Success Rate (%)')),
                ('tags', models.JSONField(blank=True, default=list, verbose_name='Tags')),
                ('created_date', models.DateTimeField(auto_now_add=True, verbose_name='Created Date')),
                ('updated_date', models.DateTimeField(auto_now=True, verbose_name='Updated Date')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
            ],
            options={
                'verbose_name': 'Course Template',
                'verbose_name_plural': 'Course Templates',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='CourseCreationSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_id', models.UUIDField(default=uuid.uuid4, unique=True, verbose_name='Session ID')),
                ('creation_method', models.CharField(choices=[('wizard', 'Step-by-Step Wizard'), ('template', 'From Template'), ('ai_assisted', 'AI-Assisted Creation'), ('bulk_import', 'Bulk Import'), ('clone', 'Clone Existing Course')], default='wizard', max_length=30, verbose_name='Creation Method')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('in_progress', 'In Progress'), ('paused', 'Paused'), ('completed', 'Completed'), ('published', 'Published'), ('failed', 'Failed'), ('abandoned', 'Abandoned')], default='draft', max_length=30, verbose_name='Status')),
                ('current_step', models.PositiveIntegerField(default=1, verbose_name='Current Step')),
                ('total_steps', models.PositiveIntegerField(default=6, verbose_name='Total Steps')),
                ('completion_percentage', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='Completion Percentage')),
                ('course_data', models.JSONField(default=dict, help_text='Course information and content being created', verbose_name='Course Data')),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional session information and tracking data', verbose_name='Session Metadata')),
                ('steps_completed', models.JSONField(default=list, verbose_name='Completed Steps')),
                ('validation_errors', models.JSONField(default=list, verbose_name='Validation Errors')),
                ('template_used', models.CharField(blank=True, max_length=200, verbose_name='Template Name Used')),
                ('ai_prompts_used', models.JSONField(blank=True, default=list, verbose_name='AI Prompts Used')),
                ('expires_at', models.DateTimeField(help_text='When this session expires if not completed', verbose_name='Expires At')),
                ('last_activity', models.DateTimeField(auto_now=True, verbose_name='Last Activity')),
                ('created_date', models.DateTimeField(auto_now_add=True, verbose_name='Created Date')),
                ('updated_date', models.DateTimeField(auto_now=True, verbose_name='Updated Date')),
                ('published_course', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='creation_session', to='courses.course', verbose_name='Published Course')),
                ('template', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='instructor_portal.coursetemplate', verbose_name='Template Used')),
            ],
            options={
                'verbose_name': 'Course Creation Session',
                'verbose_name_plural': 'Course Creation Sessions',
                'ordering': ['-updated_date'],
            },
        ),
        migrations.CreateModel(
            name='DraftCourseContent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_type', models.CharField(choices=[('course_info', 'Course Information'), ('module', 'Module Content'), ('lesson', 'Lesson Content'), ('assessment', 'Assessment Content'), ('resource', 'Resource/Material')], max_length=30, verbose_name='Content Type')),
                ('content_id', models.CharField(help_text='Unique identifier for this content piece', max_length=50, verbose_name='Content Identifier')),
                ('version', models.PositiveIntegerField(default=1, help_text='Version number for AI iteration support', verbose_name='Content Version')),
                ('content_data', models.JSONField(help_text='JSON structure containing the actual content', verbose_name='Content Data')),
                ('title', models.CharField(blank=True, max_length=200, verbose_name='Content Title')),
                ('order', models.PositiveIntegerField(default=1, verbose_name='Display Order')),
                ('is_complete', models.BooleanField(default=False, help_text='Whether this content piece is ready for publication', verbose_name='Is Complete')),
                ('validation_errors', models.JSONField(default=list, help_text='List of validation errors for this content', verbose_name='Validation Errors')),
                ('auto_save_version', models.PositiveIntegerField(default=1, help_text='Internal version for auto-save functionality', verbose_name='Auto-save Version')),
                ('last_saved', models.DateTimeField(auto_now=True, verbose_name='Last Saved')),
                ('ai_generated', models.BooleanField(default=False, help_text='Whether this content was generated using AI', verbose_name='AI Generated')),
                ('ai_prompt', models.TextField(blank=True, help_text='Original AI prompt used to generate this content', verbose_name='AI Prompt')),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='draft_content', to='instructor_portal.coursecreationsession', verbose_name='Creation Session')),
            ],
            options={
                'verbose_name': 'Draft Course Content',
                'verbose_name_plural': 'Draft Course Contents',
                'ordering': ['order', 'version'],
            },
        ),
        migrations.CreateModel(
            name='InstructorProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('display_name', models.CharField(help_text='Name shown to students', max_length=100, verbose_name='Display Name')),
                ('bio', models.TextField(blank=True, help_text='Professional biography and background', max_length=2000, verbose_name='Biography')),
                ('title', models.CharField(blank=True, help_text='e.g., Senior Software Engineer, PhD in Computer Science', max_length=150, verbose_name='Professional Title')),
                ('organization', models.CharField(blank=True, max_length=200, verbose_name='Organization/Company')),
                ('years_experience', models.PositiveIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(50)], verbose_name='Years of Experience')),
                ('website', models.URLField(blank=True, validators=[instructor_portal.models.utils.HTTPSURLValidator()], verbose_name='Website')),
                ('linkedin_profile', models.URLField(blank=True, validators=[instructor_portal.models.utils.HTTPSURLValidator()], verbose_name='LinkedIn Profile')),
                ('twitter_handle', models.CharField(blank=True, max_length=50, verbose_name='Twitter Handle')),
                ('profile_image', models.ImageField(blank=True, null=True, upload_to=instructor_portal.models.utils.generate_upload_path, verbose_name='Profile Image')),
                ('cover_image', models.ImageField(blank=True, null=True, upload_to=instructor_portal.models.utils.generate_cover_upload_path, verbose_name='Cover Image')),
                ('status', models.CharField(choices=[('pending', 'Pending Approval'), ('active', 'Active'), ('suspended', 'Suspended'), ('inactive', 'Inactive'), ('banned', 'Banned')], default='pending', max_length=30, verbose_name='Status')),
                ('is_verified', models.BooleanField(default=False, help_text='Identity and credentials verified', verbose_name='Verified Instructor')),
                ('tier', models.CharField(choices=[('bronze', 'Bronze Instructor'), ('silver', 'Silver Instructor'), ('gold', 'Gold Instructor'), ('platinum', 'Platinum Instructor'), ('diamond', 'Diamond Instructor')], default='bronze', max_length=30, verbose_name='Instructor Tier')),
                ('email_notifications', models.BooleanField(default=True, verbose_name='Email Notifications Enabled')),
                ('marketing_emails', models.BooleanField(default=False, verbose_name='Marketing Emails Enabled')),
                ('public_profile', models.BooleanField(default=True, help_text='Allow students to view your profile', verbose_name='Public Profile')),
                ('approval_date', models.DateTimeField(blank=True, null=True, verbose_name='Approval Date')),
                ('suspension_reason', models.TextField(blank=True, verbose_name='Suspension Reason')),
                ('created_date', models.DateTimeField(auto_now_add=True, verbose_name='Created Date')),
                ('updated_date', models.DateTimeField(auto_now=True, verbose_name='Updated Date')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='Last Login')),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_instructors', to=settings.AUTH_USER_MODEL, verbose_name='Approved By')),
                ('expertise_areas', models.ManyToManyField(blank=True, related_name='expert_instructors', to='courses.category', verbose_name='Areas of Expertise')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='instructor_profile', to=settings.AUTH_USER_MODEL, verbose_name='User Account')),
            ],
            options={
                'verbose_name': 'Instructor Profile',
                'verbose_name_plural': 'Instructor Profiles',
                'ordering': ['-created_date'],
            },
        ),
        migrations.CreateModel(
            name='InstructorNotification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_type', models.CharField(choices=[('course_published', 'Course Published'), ('course_approved', 'Course Approved'), ('course_rejected', 'Course Rejected'), ('new_enrollment', 'New Enrollment'), ('new_review', 'New Review'), ('course_completed', 'Course Completed by Student'), ('tier_upgraded', 'Tier Upgraded'), ('revenue_milestone', 'Revenue Milestone Reached'), ('system_announcement', 'System Announcement'), ('account_warning', 'Account Warning')], max_length=30, verbose_name='Notification Type')),
                ('priority', models.CharField(choices=[('low', 'Low Priority'), ('medium', 'Medium Priority'), ('high', 'High Priority'), ('urgent', 'Urgent')], default='medium', max_length=20, verbose_name='Priority')),
                ('title', models.CharField(max_length=200, verbose_name='Notification Title')),
                ('message', models.TextField(verbose_name='Notification Message')),
                ('action_url', models.URLField(blank=True, help_text='URL for the primary action button', verbose_name='Action URL')),
                ('action_text', models.CharField(blank=True, help_text='Text for the primary action button', max_length=50, verbose_name='Action Text')),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional data related to the notification', verbose_name='Additional Metadata')),
                ('is_read', models.BooleanField(default=False, verbose_name='Is Read')),
                ('read_at', models.DateTimeField(blank=True, null=True, verbose_name='Read At')),
                ('is_dismissed', models.BooleanField(default=False, verbose_name='Is Dismissed')),
                ('dismissed_at', models.DateTimeField(blank=True, null=True, verbose_name='Dismissed At')),
                ('email_sent', models.BooleanField(default=False, verbose_name='Email Sent')),
                ('email_sent_at', models.DateTimeField(blank=True, null=True, verbose_name='Email Sent At')),
                ('created_date', models.DateTimeField(auto_now_add=True, verbose_name='Created Date')),
                ('expires_at', models.DateTimeField(blank=True, help_text='When this notification should be automatically dismissed', null=True, verbose_name='Expires At')),
                ('instructor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='instructor_portal.instructorprofile', verbose_name='Instructor')),
            ],
            options={
                'verbose_name': 'Instructor Notification',
                'verbose_name_plural': 'Instructor Notifications',
                'ordering': ['-created_date'],
            },
        ),
        migrations.CreateModel(
            name='InstructorDashboard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('show_analytics', models.BooleanField(default=True)),
                ('show_recent_students', models.BooleanField(default=True)),
                ('show_performance_metrics', models.BooleanField(default=True)),
                ('show_revenue_charts', models.BooleanField(default=True)),
                ('show_course_progress', models.BooleanField(default=True)),
                ('notify_new_enrollments', models.BooleanField(default=True)),
                ('notify_new_reviews', models.BooleanField(default=True)),
                ('notify_course_completions', models.BooleanField(default=True)),
                ('widget_order', models.JSONField(blank=True, default=list)),
                ('custom_colors', models.JSONField(blank=True, default=dict)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('instructor', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='dashboard', to='instructor_portal.instructorprofile', verbose_name='Instructor')),
            ],
            options={
                'verbose_name': 'Instructor Dashboard',
                'verbose_name_plural': 'Instructor Dashboards',
            },
        ),
        migrations.CreateModel(
            name='InstructorAnalyticsHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Snapshot Date')),
                ('total_students', models.PositiveIntegerField(default=0)),
                ('total_courses', models.PositiveIntegerField(default=0)),
                ('average_rating', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=3)),
                ('total_revenue', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12)),
                ('completion_rate', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=5)),
                ('data_type', models.CharField(default='daily', help_text='Type of analytics snapshot (daily, weekly, monthly)', max_length=50, verbose_name='Data Type')),
                ('additional_data', models.JSONField(blank=True, default=dict, verbose_name='Additional Data')),
                ('instructor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='analytics_history', to='instructor_portal.instructorprofile', verbose_name='Instructor')),
            ],
            options={
                'verbose_name': 'Analytics History',
                'verbose_name_plural': 'Analytics History',
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='InstructorAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_students', models.PositiveIntegerField(default=0, verbose_name='Total Students Taught')),
                ('total_courses', models.PositiveIntegerField(default=0, verbose_name='Total Courses Created')),
                ('average_rating', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=3, validators=[django.core.validators.MinValueValidator(Decimal('0.00')), django.core.validators.MaxValueValidator(Decimal('5.00'))], verbose_name='Average Rating')),
                ('total_reviews', models.PositiveIntegerField(default=0, verbose_name='Total Reviews')),
                ('total_revenue', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Total Revenue')),
                ('completion_rate', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=5, verbose_name='Course Completion Rate (%)')),
                ('student_satisfaction_rate', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=5, verbose_name='Student Satisfaction Rate (%)')),
                ('monthly_revenue', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12, verbose_name='Monthly Revenue')),
                ('last_updated', models.DateTimeField(auto_now=True, verbose_name='Last Updated')),
                ('last_calculated', models.DateTimeField(blank=True, null=True, verbose_name='Last Calculated')),
                ('instructor', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='analytics', to='instructor_portal.instructorprofile', verbose_name='Instructor')),
            ],
            options={
                'verbose_name': 'Instructor Analytics',
                'verbose_name_plural': 'Instructor Analytics',
            },
        ),
        migrations.AddField(
            model_name='coursecreationsession',
            name='instructor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='creation_sessions', to='instructor_portal.instructorprofile', verbose_name='Instructor'),
        ),
        migrations.CreateModel(
            name='InstructorSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_key', models.CharField(max_length=40, unique=True, verbose_name='Session Key')),
                ('ip_address', models.GenericIPAddressField(verbose_name='IP Address')),
                ('user_agent', models.TextField(blank=True, verbose_name='User Agent')),
                ('device_type', models.CharField(choices=[('desktop', 'Desktop'), ('mobile', 'Mobile'), ('tablet', 'Tablet'), ('unknown', 'Unknown')], default='unknown', max_length=20, verbose_name='Device Type')),
                ('location', models.CharField(blank=True, help_text='Approximate location based on IP', max_length=100, verbose_name='Location')),
                ('login_time', models.DateTimeField(auto_now_add=True, verbose_name='Login Time')),
                ('last_activity', models.DateTimeField(auto_now=True, verbose_name='Last Activity')),
                ('logout_time', models.DateTimeField(blank=True, null=True, verbose_name='Logout Time')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('is_suspicious', models.BooleanField(default=False, help_text='Flagged for suspicious activity', verbose_name='Is Suspicious')),
                ('security_notes', models.TextField(blank=True, verbose_name='Security Notes')),
                ('instructor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to='instructor_portal.instructorprofile', verbose_name='Instructor')),
            ],
            options={
                'verbose_name': 'Instructor Session',
                'verbose_name_plural': 'Instructor Sessions',
                'ordering': ['-login_time'],
            },
        ),
        migrations.CreateModel(
            name='CourseContentDraft',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_type', models.CharField(choices=[('course_info', 'Course Information'), ('module', 'Module Content'), ('lesson', 'Lesson Content'), ('assessment', 'Assessment Content'), ('resource', 'Resource/Material')], max_length=30, verbose_name='Content Type')),
                ('file_path', models.FileField(blank=True, null=True, upload_to='course_drafts/%Y/%m/%d/', verbose_name='Content File')),
                ('content_hash', models.CharField(help_text='SHA-256 hash for content deduplication and integrity', max_length=64, verbose_name='Content Hash')),
                ('version', models.PositiveIntegerField(default=1, verbose_name='Content Version')),
                ('is_processed', models.BooleanField(default=False, help_text='Whether file has been processed and validated', verbose_name='Is Processed')),
                ('processing_status', models.CharField(choices=[('pending', 'Pending Processing'), ('processing', 'Processing'), ('completed', 'Processing Completed'), ('failed', 'Processing Failed'), ('virus_scan', 'Virus Scanning'), ('format_conversion', 'Format Conversion')], default='pending', max_length=30, verbose_name='Processing Status')),
                ('processing_error', models.TextField(blank=True, help_text='Error message if processing failed', verbose_name='Processing Error')),
                ('file_size', models.PositiveIntegerField(blank=True, null=True, verbose_name='File Size (bytes)')),
                ('mime_type', models.CharField(blank=True, max_length=100, verbose_name='MIME Type')),
                ('original_filename', models.CharField(blank=True, max_length=255, verbose_name='Original Filename')),
                ('processing_metadata', models.JSONField(blank=True, default=dict, help_text='Additional metadata from processing (dimensions, duration, etc.)', verbose_name='Processing Metadata')),
                ('created_date', models.DateTimeField(auto_now_add=True, verbose_name='Created Date')),
                ('processed_date', models.DateTimeField(blank=True, null=True, verbose_name='Processed Date')),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='content_drafts', to='instructor_portal.coursecreationsession', verbose_name='Creation Session')),
            ],
            options={
                'verbose_name': 'Course Content Draft',
                'verbose_name_plural': 'Course Content Drafts',
                'ordering': ['-created_date'],
                'indexes': [models.Index(fields=['session', 'processing_status'], name='instructor__session_f8b88d_idx'), models.Index(fields=['content_hash'], name='instructor__content_c32597_idx'), models.Index(fields=['is_processed', 'created_date'], name='instructor__is_proc_36af61_idx'), models.Index(fields=['processing_status', 'created_date'], name='instructor__process_5df0ce_idx')],
                'unique_together': {('session', 'content_type', 'version')},
            },
        ),
        migrations.CreateModel(
            name='CourseInstructor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('primary', 'Primary Instructor'), ('co_instructor', 'Co-Instructor'), ('assistant', 'Teaching Assistant'), ('guest', 'Guest Instructor')], default='primary', max_length=30, verbose_name='Role')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('is_lead', models.BooleanField(default=False, verbose_name='Is Lead Instructor')),
                ('can_edit_content', models.BooleanField(default=True)),
                ('can_manage_students', models.BooleanField(default=True)),
                ('can_view_analytics', models.BooleanField(default=True)),
                ('revenue_share_percentage', models.DecimalField(decimal_places=2, default=Decimal('100.00'), max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0.00')), django.core.validators.MaxValueValidator(Decimal('100.00'))])),
                ('joined_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='courses.course', verbose_name='Course')),
                ('instructor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Instructor')),
            ],
            options={
                'verbose_name': 'Course Instructor',
                'verbose_name_plural': 'Course Instructors',
                'ordering': ['course', '-is_lead', 'joined_date'],
                'indexes': [models.Index(fields=['course', 'is_active'], name='instructor__course__80570e_idx'), models.Index(fields=['instructor', 'is_active'], name='instructor__instruc_6c0904_idx'), models.Index(fields=['role', 'is_active'], name='instructor__role_dc193b_idx')],
                'constraints': [models.CheckConstraint(condition=models.Q(('revenue_share_percentage__gte', 0), ('revenue_share_percentage__lte', 100)), name='valid_revenue_share_percentage')],
                'unique_together': {('course', 'instructor')},
            },
        ),
        migrations.AddIndex(
            model_name='coursetemplate',
            index=models.Index(fields=['template_type', 'is_active'], name='instructor__templat_e5f5ef_idx'),
        ),
        migrations.AddIndex(
            model_name='coursetemplate',
            index=models.Index(fields=['is_active', 'required_tier'], name='instructor__is_acti_bb05a8_idx'),
        ),
        migrations.AddIndex(
            model_name='coursetemplate',
            index=models.Index(fields=['usage_count'], name='instructor__usage_c_377784_idx'),
        ),
        migrations.AddIndex(
            model_name='draftcoursecontent',
            index=models.Index(fields=['session', 'content_type'], name='instructor__session_60ca31_idx'),
        ),
        migrations.AddIndex(
            model_name='draftcoursecontent',
            index=models.Index(fields=['session', 'order'], name='instructor__session_126edb_idx'),
        ),
        migrations.AddIndex(
            model_name='draftcoursecontent',
            index=models.Index(fields=['session', 'content_type', 'version'], name='instructor__session_ab2b78_idx'),
        ),
        migrations.AddIndex(
            model_name='draftcoursecontent',
            index=models.Index(fields=['is_complete', 'last_saved'], name='instructor__is_comp_5366a4_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='draftcoursecontent',
            unique_together={('session', 'content_type', 'content_id', 'version')},
        ),
        migrations.AddIndex(
            model_name='instructorprofile',
            index=models.Index(fields=['status', 'is_verified'], name='instructor_status_verified_idx'),
        ),
        migrations.AddIndex(
            model_name='instructorprofile',
            index=models.Index(fields=['tier', '-created_date'], name='instructor_tier_created_idx'),
        ),
        migrations.AddIndex(
            model_name='instructorprofile',
            index=models.Index(fields=['status', 'tier'], name='instructor_status_tier_idx'),
        ),
        migrations.AddConstraint(
            model_name='instructorprofile',
            constraint=models.CheckConstraint(condition=models.Q(('years_experience__gte', 0), ('years_experience__lte', 50)), name='valid_experience_years'),
        ),
        migrations.AddIndex(
            model_name='instructornotification',
            index=models.Index(fields=['instructor', 'is_read', '-created_date'], name='instructor__instruc_7d1457_idx'),
        ),
        migrations.AddIndex(
            model_name='instructornotification',
            index=models.Index(fields=['instructor', 'notification_type'], name='instructor__instruc_bf496b_idx'),
        ),
        migrations.AddIndex(
            model_name='instructornotification',
            index=models.Index(fields=['priority', 'created_date'], name='instructor__priorit_1cb57a_idx'),
        ),
        migrations.AddIndex(
            model_name='instructornotification',
            index=models.Index(fields=['expires_at'], name='instructor__expires_657510_idx'),
        ),
        migrations.AddIndex(
            model_name='instructoranalyticshistory',
            index=models.Index(fields=['instructor', '-date'], name='instructor__instruc_a853b6_idx'),
        ),
        migrations.AddIndex(
            model_name='instructoranalyticshistory',
            index=models.Index(fields=['instructor', 'data_type', '-date'], name='instructor__instruc_105e89_idx'),
        ),
        migrations.AddIndex(
            model_name='instructoranalytics',
            index=models.Index(fields=['instructor', 'last_updated'], name='instructor__instruc_b18673_idx'),
        ),
        migrations.AddIndex(
            model_name='instructoranalytics',
            index=models.Index(fields=['total_students', 'average_rating'], name='instructor__total_s_6586c2_idx'),
        ),
        migrations.AddConstraint(
            model_name='instructoranalytics',
            constraint=models.CheckConstraint(condition=models.Q(('average_rating__gte', 0), ('average_rating__lte', 5)), name='analytics_valid_rating'),
        ),
        migrations.AddConstraint(
            model_name='instructoranalytics',
            constraint=models.CheckConstraint(condition=models.Q(('total_revenue__gte', 0)), name='analytics_positive_revenue'),
        ),
        migrations.AddIndex(
            model_name='coursecreationsession',
            index=models.Index(fields=['instructor', 'status'], name='instructor__instruc_fffdb5_idx'),
        ),
        migrations.AddIndex(
            model_name='coursecreationsession',
            index=models.Index(fields=['status', 'expires_at'], name='instructor__status_ff6efa_idx'),
        ),
        migrations.AddIndex(
            model_name='coursecreationsession',
            index=models.Index(fields=['session_id'], name='instructor__session_1a1386_idx'),
        ),
        migrations.AddIndex(
            model_name='coursecreationsession',
            index=models.Index(fields=['creation_method', 'status'], name='instructor__creatio_af8e34_idx'),
        ),
        migrations.AddIndex(
            model_name='instructorsession',
            index=models.Index(fields=['instructor', '-login_time'], name='instructor__instruc_a56576_idx'),
        ),
        migrations.AddIndex(
            model_name='instructorsession',
            index=models.Index(fields=['session_key'], name='instructor__session_8512ff_idx'),
        ),
        migrations.AddIndex(
            model_name='instructorsession',
            index=models.Index(fields=['ip_address', 'login_time'], name='instructor__ip_addr_6fb7f3_idx'),
        ),
        migrations.AddIndex(
            model_name='instructorsession',
            index=models.Index(fields=['is_active', 'last_activity'], name='instructor__is_acti_dbf638_idx'),
        ),
    ]
